import 'dart:io';
import 'package:flutter/services.dart';
import 'package:local_auth/local_auth.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class BiometricAuthService {
  static final BiometricAuthService instance = BiometricAuthService._internal();
  final LocalAuthentication _localAuth = LocalAuthentication();
  final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();

  BiometricAuthService._internal();

  /// Verifica si la autenticaci√≥n biom√©trica est√° disponible
  Future<bool> isBiometricAvailable() async {
    try {
      final isAvailable = await _localAuth.canCheckBiometrics;
      final isDeviceSupported = await _localAuth.isDeviceSupported();
      
      print('üîç Verificando biometr√≠a: isAvailable=$isAvailable, isDeviceSupported=$isDeviceSupported');
      
      return isAvailable && isDeviceSupported;
    } on PlatformException catch (e) {
      print('‚ùå Error verificando disponibilidad biom√©trica: ${e.code} - ${e.message}');
      return false;
    } catch (e) {
      print('‚ùå Error inesperado verificando disponibilidad biom√©trica: $e');
      return false;
    }
  }

  /// Obtiene los tipos de autenticaci√≥n biom√©trica disponibles
  Future<List<BiometricType>> getAvailableBiometrics() async {
    try {
      final availableBiometrics = await _localAuth.getAvailableBiometrics();
      print('üì± Biometr√≠as disponibles: $availableBiometrics');
      return availableBiometrics;
    } on PlatformException catch (e) {
      print('‚ùå Error obteniendo biometr√≠as disponibles: ${e.code} - ${e.message}');
      return [];
    } catch (e) {
      print('‚ùå Error inesperado obteniendo biometr√≠as disponibles: $e');
      return [];
    }
  }

  /// Obtiene el nombre amigable del tipo de biometr√≠a
  String getBiometricTypeName(BiometricType type) {
    switch (type) {
      case BiometricType.face:
        return Platform.isIOS ? 'Face ID' : 'Reconocimiento facial';
      case BiometricType.fingerprint:
        return Platform.isIOS ? 'Touch ID' : 'Huella dactilar';
      case BiometricType.iris:
        return 'Iris';
      default:
        return 'Biometr√≠a';
    }
  }

  /// Obtiene el nombre del tipo de biometr√≠a principal disponible (optimizado para iPhone f√≠sico)
  Future<String> getPrimaryBiometricTypeName() async {
    final availableBiometrics = await getAvailableBiometrics();
    
    // En iPhone f√≠sico, solo usar Face ID (no Touch ID)
    if (Platform.isIOS) {
      if (availableBiometrics.contains(BiometricType.face)) {
        return 'Face ID';
      }
      // No usar Touch ID en iPhone f√≠sico
    } else {
      // Android: priorizar huella dactilar
      if (availableBiometrics.contains(BiometricType.fingerprint)) {
        return 'Huella dactilar';
      } else if (availableBiometrics.contains(BiometricType.face)) {
        return 'Reconocimiento facial';
      }
    }
    
    if (availableBiometrics.contains(BiometricType.iris)) {
      return 'Iris';
    }
    
    return 'Autenticaci√≥n biom√©trica';
  }

  /// Verifica si el usuario ha habilitado la autenticaci√≥n biom√©trica
  Future<bool> isBiometricEnabled() async {
    try {
      final isEnabled = await _secureStorage.read(key: 'biometric_enabled');
      return isEnabled == 'true';
    } catch (e) {
      print('‚ùå Error verificando si biometr√≠a est√° habilitada: $e');
      return false;
    }
  }

  /// Habilita la autenticaci√≥n biom√©trica para el usuario
  Future<Map<String, dynamic>> enableBiometric() async {
    try {
      print('üîê Iniciando habilitaci√≥n de biometr√≠a...');
      
      // Verificar que la biometr√≠a est√© disponible
      if (!await isBiometricAvailable()) {
        return {
          'success': false,
          'error': 'La autenticaci√≥n biom√©trica no est√° disponible en este dispositivo',
          'code': 'NOT_AVAILABLE'
        };
      }

      // Verificar que est√© configurada
      if (!await hasBiometricConfigured()) {
        return {
          'success': false,
          'error': 'No tienes biometr√≠a configurada en tu dispositivo. Ve a Configuraci√≥n > Face ID y c√≥digo de acceso para configurarla.',
          'code': 'NOT_CONFIGURED'
        };
      }

      // Realizar una autenticaci√≥n de prueba directa (sin verificar si ya est√° habilitada)
      print('üîê Realizando prueba de autenticaci√≥n para habilitar...');
      
      final authenticated = await _localAuth.authenticate(
        localizedReason: 'Habilitar autenticaci√≥n biom√©trica',
        options: const AuthenticationOptions(
          stickyAuth: true,
          biometricOnly: true,
        ),
      );

      print('üîê Resultado de autenticaci√≥n para habilitar: $authenticated');

      if (authenticated) {
        await _secureStorage.write(key: 'biometric_enabled', value: 'true');
        print('‚úÖ Biometr√≠a habilitada exitosamente');
        return {
          'success': true,
          'message': 'Autenticaci√≥n biom√©trica habilitada exitosamente'
        };
      } else {
        return {
          'success': false,
          'error': 'La autenticaci√≥n biom√©trica fue cancelada o fall√≥',
          'code': 'AUTH_FAILED'
        };
      }
    } on PlatformException catch (e) {
      print('‚ùå Error habilitando biometr√≠a: ${e.code} - ${e.message}');
      String errorMessage = 'Error al habilitar la autenticaci√≥n biom√©trica';
      
      switch (e.code) {
        case 'NotAvailable':
          errorMessage = 'La autenticaci√≥n biom√©trica no est√° disponible';
          break;
        case 'NotEnrolled':
          errorMessage = 'No tienes biometr√≠a configurada. Ve a Configuraci√≥n > Face ID y c√≥digo de acceso.';
          break;
        case 'PasscodeNotSet':
          errorMessage = 'Debes configurar un c√≥digo de acceso antes de usar biometr√≠a';
          break;
        case 'LockedOut':
          errorMessage = 'La biometr√≠a est√° bloqueada temporalmente. Int√©ntalo m√°s tarde.';
          break;
        case 'PermanentlyLockedOut':
          errorMessage = 'La biometr√≠a est√° bloqueada permanentemente. Ve a Configuraci√≥n para desbloquearla.';
          break;
        case 'UserCancel':
          errorMessage = 'Autenticaci√≥n cancelada por el usuario';
          break;
        case 'AuthenticationFailed':
          errorMessage = 'La autenticaci√≥n biom√©trica fall√≥. Int√©ntalo de nuevo.';
          break;
        case 'UserFallback':
          errorMessage = 'El usuario eligi√≥ usar el m√©todo alternativo';
          break;
        case 'SystemCancel':
          errorMessage = 'La autenticaci√≥n fue cancelada por el sistema';
          break;
        case 'InvalidContext':
          errorMessage = 'Contexto de autenticaci√≥n inv√°lido';
          break;
        default:
          errorMessage = 'Error: ${e.message} (C√≥digo: ${e.code})';
      }
      
      return {
        'success': false,
        'error': errorMessage,
        'code': e.code
      };
    } catch (e) {
      print('‚ùå Error inesperado habilitando biometr√≠a: $e');
      return {
        'success': false,
        'error': 'Error inesperado al habilitar la biometr√≠a',
        'code': 'UNKNOWN_ERROR'
      };
    }
  }

  /// Deshabilita la autenticaci√≥n biom√©trica
  Future<void> disableBiometric() async {
    await _secureStorage.delete(key: 'biometric_enabled');
    print('üîì Biometr√≠a deshabilitada');
  }

  /// Realiza la autenticaci√≥n biom√©trica
  Future<Map<String, dynamic>> authenticate({
    required String reason,
  }) async {
    try {
      print('üîê Iniciando autenticaci√≥n biom√©trica...');
      print('üîê Raz√≥n: $reason');
      
      // Verificar si la biometr√≠a est√° habilitada
      if (!await isBiometricEnabled()) {
        print('‚ùå Biometr√≠a no habilitada');
        return {
          'success': false,
          'error': 'La autenticaci√≥n biom√©trica no est√° habilitada',
          'code': 'NOT_ENABLED'
        };
      }

      // Configurar opciones de autenticaci√≥n
      final authOptions = AuthenticationOptions(
        stickyAuth: true,
        biometricOnly: true,
      );

      print('üîê Opciones de autenticaci√≥n configuradas');
      print('üîê Llamando a _localAuth.authenticate...');

      // Realizar autenticaci√≥n
      final authenticated = await _localAuth.authenticate(
        localizedReason: reason,
        options: authOptions,
      );

      print('üîê Resultado de autenticaci√≥n: $authenticated');

      if (authenticated) {
        print('‚úÖ Autenticaci√≥n biom√©trica exitosa');
        return {
          'success': true,
          'message': 'Autenticaci√≥n exitosa'
        };
      } else {
        print('‚ùå Autenticaci√≥n biom√©trica fall√≥ o fue cancelada');
        return {
          'success': false,
          'error': 'La autenticaci√≥n biom√©trica fue cancelada o fall√≥',
          'code': 'AUTH_CANCELLED'
        };
      }
    } on PlatformException catch (e) {
      print('‚ùå Error en autenticaci√≥n biom√©trica: ${e.code} - ${e.message}');
      print('‚ùå Detalles del error: ${e.details}');
      String errorMessage = 'Error en la autenticaci√≥n biom√©trica';
      
      switch (e.code) {
        case 'NotAvailable':
          errorMessage = 'La autenticaci√≥n biom√©trica no est√° disponible';
          break;
        case 'NotEnrolled':
          errorMessage = 'No tienes biometr√≠a configurada. Ve a Configuraci√≥n > Face ID y c√≥digo de acceso.';
          break;
        case 'PasscodeNotSet':
          errorMessage = 'Debes configurar un c√≥digo de acceso antes de usar biometr√≠a';
          break;
        case 'LockedOut':
          errorMessage = 'La biometr√≠a est√° bloqueada temporalmente. Int√©ntalo m√°s tarde.';
          break;
        case 'PermanentlyLockedOut':
          errorMessage = 'La biometr√≠a est√° bloqueada permanentemente. Ve a Configuraci√≥n para desbloquearla.';
          break;
        case 'UserCancel':
          errorMessage = 'Autenticaci√≥n cancelada por el usuario';
          break;
        case 'AuthenticationFailed':
          errorMessage = 'La autenticaci√≥n biom√©trica fall√≥. Int√©ntalo de nuevo.';
          break;
        case 'UserFallback':
          errorMessage = 'El usuario eligi√≥ usar el m√©todo alternativo';
          break;
        case 'SystemCancel':
          errorMessage = 'La autenticaci√≥n fue cancelada por el sistema';
          break;
        case 'InvalidContext':
          errorMessage = 'Contexto de autenticaci√≥n inv√°lido';
          break;
        default:
          errorMessage = 'Error: ${e.message} (C√≥digo: ${e.code})';
      }
      
      return {
        'success': false,
        'error': errorMessage,
        'code': e.code
      };
    } catch (e) {
      print('‚ùå Error inesperado en autenticaci√≥n: $e');
      print('‚ùå Tipo de error: ${e.runtimeType}');
      return {
        'success': false,
        'error': 'Error inesperado en la autenticaci√≥n: $e',
        'code': 'UNKNOWN_ERROR'
      };
    }
  }

  /// Autenticaci√≥n biom√©trica para acceso a la app
  Future<Map<String, dynamic>> authenticateForAppAccess() async {
    try {
      final biometricType = await getPrimaryBiometricTypeName();
      final reason = 'Usa $biometricType para acceder a Neek';
      
      print('üîê Iniciando autenticaci√≥n para acceso a la app...');
      print('üîê Tipo de biometr√≠a: $biometricType');
      
      // Verificar si la biometr√≠a est√° habilitada en la app
      final isEnabled = await isBiometricEnabled();
      if (!isEnabled) {
        print('‚ùå Biometr√≠a no habilitada en la app');
        return {
          'success': false,
          'error': 'La autenticaci√≥n biom√©trica no est√° habilitada en la app',
          'code': 'NOT_ENABLED_IN_APP'
        };
      }
      
      // Realizar autenticaci√≥n directa
      final authenticated = await _localAuth.authenticate(
        localizedReason: reason,
        options: const AuthenticationOptions(
          stickyAuth: true,
          biometricOnly: true,
        ),
      );
      
      print('üîê Resultado de autenticaci√≥n para acceso: $authenticated');
      
      if (authenticated) {
        print('‚úÖ Autenticaci√≥n para acceso exitosa');
        return {
          'success': true,
          'message': 'Autenticaci√≥n exitosa'
        };
      } else {
        print('‚ùå Autenticaci√≥n para acceso fall√≥ o fue cancelada');
        return {
          'success': false,
          'error': 'La autenticaci√≥n biom√©trica fue cancelada o fall√≥',
          'code': 'AUTH_CANCELLED'
        };
      }
    } on PlatformException catch (e) {
      print('‚ùå Error en autenticaci√≥n para acceso: ${e.code} - ${e.message}');
      String errorMessage = 'Error en la autenticaci√≥n biom√©trica';
      
      switch (e.code) {
        case 'NotAvailable':
          errorMessage = 'La autenticaci√≥n biom√©trica no est√° disponible';
          break;
        case 'NotEnrolled':
          errorMessage = 'No tienes biometr√≠a configurada';
          break;
        case 'PasscodeNotSet':
          errorMessage = 'Debes configurar un c√≥digo de acceso';
          break;
        case 'LockedOut':
          errorMessage = 'La biometr√≠a est√° bloqueada temporalmente';
          break;
        case 'PermanentlyLockedOut':
          errorMessage = 'La biometr√≠a est√° bloqueada permanentemente';
          break;
        case 'UserCancel':
          errorMessage = 'Autenticaci√≥n cancelada por el usuario';
          break;
        case 'AuthenticationFailed':
          errorMessage = 'La autenticaci√≥n biom√©trica fall√≥. Int√©ntalo de nuevo.';
          break;
        case 'UserFallback':
          errorMessage = 'El usuario eligi√≥ usar el m√©todo alternativo';
          break;
        case 'SystemCancel':
          errorMessage = 'La autenticaci√≥n fue cancelada por el sistema';
          break;
        case 'InvalidContext':
          errorMessage = 'Contexto de autenticaci√≥n inv√°lido';
          break;
        default:
          errorMessage = 'Error: ${e.message} (C√≥digo: ${e.code})';
      }
      
      return {
        'success': false,
        'error': errorMessage,
        'code': e.code
      };
    } catch (e) {
      print('‚ùå Error inesperado en autenticaci√≥n para acceso: $e');
      return {
        'success': false,
        'error': 'Error inesperado en la autenticaci√≥n',
        'code': 'UNKNOWN_ERROR'
      };
    }
  }

  /// Verifica si el dispositivo tiene biometr√≠a configurada
  Future<bool> hasBiometricConfigured() async {
    try {
      final availableBiometrics = await getAvailableBiometrics();
      final hasConfigured = availableBiometrics.isNotEmpty;
      print('üì± Biometr√≠a configurada: $hasConfigured');
      return hasConfigured;
    } catch (e) {
      print('‚ùå Error verificando configuraci√≥n de biometr√≠a: $e');
      return false;
    }
  }

  /// Obtiene informaci√≥n completa sobre el estado de la biometr√≠a
  Future<Map<String, dynamic>> getBiometricStatus() async {
    try {
      final isAvailable = await isBiometricAvailable();
      final isEnabled = await isBiometricEnabled();
      final hasConfigured = await hasBiometricConfigured();
      final availableTypes = await getAvailableBiometrics();
      final primaryType = await getPrimaryBiometricTypeName();

      final status = {
        'isAvailable': isAvailable,
        'isEnabled': isEnabled,
        'hasConfigured': hasConfigured,
        'availableTypes': availableTypes,
        'primaryType': primaryType,
        'canUseBiometric': isAvailable && isEnabled && hasConfigured,
      };

      print('üìä Estado de biometr√≠a: $status');
      return status;
    } catch (e, stackTrace) {
      print('‚ùå Error obteniendo estado de biometr√≠a: $e');
      print('‚ùå Stack trace: $stackTrace');
      
      // Retornar estado por defecto en caso de error
      return {
        'isAvailable': false,
        'isEnabled': false,
        'hasConfigured': false,
        'availableTypes': [],
        'primaryType': 'Biometr√≠a',
        'canUseBiometric': false,
      };
    }
  }

  /// Configuraci√≥n inicial de biometr√≠a
  Future<Map<String, dynamic>> setupBiometric() async {
    return await enableBiometric();
  }

  /// M√©todo de prueba para diagnosticar problemas de autenticaci√≥n
  Future<Map<String, dynamic>> testBiometricAuth() async {
    try {
      print('üß™ Iniciando prueba de autenticaci√≥n biom√©trica...');
      
      // Verificar disponibilidad b√°sica
      final isAvailable = await _localAuth.canCheckBiometrics;
      final isDeviceSupported = await _localAuth.isDeviceSupported();
      final availableBiometrics = await _localAuth.getAvailableBiometrics();
      
      print('üß™ isAvailable: $isAvailable');
      print('üß™ isDeviceSupported: $isDeviceSupported');
      print('üß™ availableBiometrics: $availableBiometrics');
      
      if (!isAvailable || !isDeviceSupported) {
        return {
          'success': false,
          'error': 'Biometr√≠a no disponible o dispositivo no soportado',
          'code': 'NOT_AVAILABLE'
        };
      }
      
      // Intentar autenticaci√≥n directa sin verificaciones adicionales
      print('üß™ Intentando autenticaci√≥n directa...');
      
      final authenticated = await _localAuth.authenticate(
        localizedReason: 'Prueba de autenticaci√≥n biom√©trica',
        options: const AuthenticationOptions(
          stickyAuth: true,
          biometricOnly: true,
        ),
      );
      
      print('üß™ Resultado de autenticaci√≥n directa: $authenticated');
      
      return {
        'success': authenticated,
        'message': authenticated ? 'Prueba exitosa' : 'Prueba fallida',
        'code': authenticated ? 'SUCCESS' : 'FAILED'
      };
      
    } on PlatformException catch (e) {
      print('üß™ Error en prueba: ${e.code} - ${e.message}');
      return {
        'success': false,
        'error': 'Error en prueba: ${e.message}',
        'code': e.code
      };
    } catch (e) {
      print('üß™ Error inesperado en prueba: $e');
      return {
        'success': false,
        'error': 'Error inesperado: $e',
        'code': 'UNKNOWN_ERROR'
      };
    }
  }
} 